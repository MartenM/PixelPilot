# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
      env:
          PIXELWALKER_TEST_EMAIL: ${{ secrets.PIXELWALKER_TEST_EMAIL }}
          PIXELWALKER_TEST_PASSWORD: ${{ secrets.PIXELWALKER_TEST_PASSWORD }}
    - name: Pack
      run: dotnet pack --no-restore

  # Create a NUGET release if pushed to main.
  # Checks for PixelPilot.Core for an updated project version.
  deploy-planner:
    name: Deployment Planner
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build
    outputs: 
      new-tag-found: ${{ steps.tag_check.outputs.new-tag-found }}
      new-tag: ${{ steps.tag_check.outputs.new-tag }}
      previous-tag: ${{ steps.tag_check.outputs.previous-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Read .csproj  
        uses: kzrnm/get-net-sdk-project-versions-action@v2
        id: get-version
        with:
          proj-path: src/PixelPilot.Core/PixelPilot.Core.csproj
      # Create the TAG env variable
      - name: Create new tag
        run: echo "TAG=v${{steps.get-version.outputs.version}}" >> $GITHUB_ENV
      - name: Check for new tag
        id: tag_check
        run: |
          echo "🛠 Running check for tag: ${{ env.TAG }}"
          if git show-ref --tags --verify --quiet "refs/tags/${{ env.TAG }}"; then
            echo "❌ Tag ${{ env.TAG }} exists"
            echo "new-tag-found=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Tag ${{ env.TAG }} does not exist yet. Creating a release."
            echo "new-tag-found=true" >> $GITHUB_OUTPUT
            echo "new-tag=${{ env.TAG }}" >> $GITHUB_OUTPUT
            echo "previous-tag=$(git describe --tags --match "v*" --abbrev=0)" >> $GITHUB_OUTPUT
          fi
  deploy:
    name: Deploy PixelPilot packages
    if: needs.deploy-planner.outputs.new-tag-found == 'true'
    needs: deploy-planner
    runs-on: ubuntu-latest
    env: 
      ReleaseTextFile: ${{ github.workspace }}/release.txt
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Create NuGet package
        run: |
          version=${{ needs.deploy-planner.outputs.new-tag }}
          version=${version#v}
          dotnet pack "src/PixelPilot.Core/PixelPilot.Core.csproj" --configuration Release --output ${{ env.NuGetDirectory }}
          dotnet pack "src/PixelPilot.Structures/PixelPilot.Structures.csproj" --configuration Release --output ${{ env.NuGetDirectory }} -p:PackageVersion=$version
          dotnet pack "src/PixelPilot.ChatCommands/PixelPilot.ChatCommands.csproj" --configuration Release --output ${{ env.NuGetDirectory }} -p:PackageVersion=$version

      # Publish the NuGet package as an artifact, so they can be used in the following jobs
      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          echo "🚀 Publishing (${{needs.deploy-planner.outputs.new-tag}}) to NuGet!"
          for file in $( find ${{ env.NuGetDirectory }} -type f -name "*.nupkg" )
          do
            echo "📎 Pushing $file"
            dotnet nuget push $file --api-key "${{ secrets.NUGET_TOKEN }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          done
      
      # Create release text. Use commits up until the last vx.x.x tag to describe it.
      - name: Create release text
        run: |
          echo "🚀 Now available on NuGet https://www.nuget.org/packages/PixelPilot.Core" >> ${{env.ReleaseTextFile}}
          echo -e "\n" >> ${{env.ReleaseTextFile}}
          echo "**Full Changelog**: https://github.com/MartenM/PixelPilot/compare/${{ needs.deploy-planner.outputs.previous-tag }}...${{ needs.deploy-planner.outputs.new-tag }}" >> ${{env.ReleaseTextFile}}
      
      # Create and publish the release
      - name: Create Github Release
        uses: softprops/action-gh-release@v2
        id: release
        with:
          name: ${{ needs.deploy-planner.outputs.new-tag }}
          tag_name: ${{ needs.deploy-planner.outputs.new-tag }}
          token: ${{ secrets.RELEASE_TOKEN }}
          body_path: ${{env.ReleaseTextFile}}
